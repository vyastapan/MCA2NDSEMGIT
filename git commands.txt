1) Analyse a scenario where multiple developers are working on different features of a project simultaneously. Discuss how Git branching and merging strategies can be utilized to manage this situation efficiently.
answer 1.        1. feature branching:
step 1-  git checkout -b feature-authentication
step 2-  git checlout -b feature/shopping-cart
step 3-  git checkout -b feature/db-optimization

2.Regular commits:
step 1-git add.
git commit -m

3.pulling latest changes:
step 1- git pull origin main
step 2-git checkout main
git merge feature/user-authentication

4.merging changes:
step 1-git checkout main
git merge feature/user-authentifaction
step 2-git checkout main
git merge feature/shopping-cart
step 3-git checkout main
git merge feature/dp-optimization

5 Resolving merge conflicts:
step1 - git add.
git commit -m

2) Write a series of Git commands to create a new branch, make changes to files, commit those changes, merge the branch back into the main branch, and push changes to a remote repository. 
answer 2.
1. clone the romote repository
 cd <repository_name>
2. create a new branch
 git checkout -b new-feature-branch
3.add and commit the change
git add example.txt
git commit -m 
4.switch back to the main branch
git checkout main
5.merge the new branch into the main branch
git merge new-feature-branch
6.push change to the remote repository
git push origin main
3) Create a GitHub repository for a sample project and demonstrate how to clone it, make changes, commit them, and push them back to the remote repository. 
answer 3.
# Clone the repository
git clone https://github.com/your-username/sample-project.git

# Navigate to the cloned repository
cd sample-project

# Create or modify a file
echo "Hello, GitHub!" > hello.txt

# Check the status
git status

# Stage the changes
git add hello.txt

# Commit the changes
git commit -m "Add a new hello.txt file"

# Push the changes to the remote repository
git push origin main

4) You accidentally committed a file with sensitive information to a Git repository and pushed it to GitHub. Describe the steps you would take to remove that file from the commit history and GitHubÂ repository.
answer 4.
# Check the commit history
git log --oneline

# Remove the sensitive file from the commit
git filter-branch --index-filter "git rm --cached --ignore-unmatch path/to/sensitive-file" HEAD

# Force push to update the remote repository
git push origin main --force

# Add the sensitive file to .gitignore
echo "path/to/sensitive-file" >> .gitignore

# Commit and push the changes to update .gitignore
git add .gitignore
git commit -m "Update .gitignore to exclude sensitive file"
git push origin main


















