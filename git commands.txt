1) Analyse a scenario where multiple developers are working on different features of a project simultaneously. Discuss how Git branching and merging strategies can be utilized to manage this situation efficiently.
answer 1.        1. feature branching:
step 1-  git checkout -b feature-authentication
step 2-  git checlout -b feature/shopping-cart
step 3-  git checkout -b feature/db-optimization

2.Regular commits:
step 1-git add.
git commit -m

3.pulling latest changes:
step 1- git pull origin main
step 2-git checkout main
git merge feature/user-authentication

4.merging changes:
step 1-git checkout main
git merge feature/user-authentifaction
step 2-git checkout main
git merge feature/shopping-cart
step 3-git checkout main
git merge feature/dp-optimization

5 Resolving merge conflicts:
step1 - git add.
git commit -m

2) Write a series of Git commands to create a new branch, make changes to files, commit those changes, merge the branch back into the main branch, and push changes to a remote repository. 
answer 2.
1. clone the romote repository
 cd <repository_name>
2. create a new branch
 git checkout -b new-feature-branch
3.add and commit the change
git add example.txt
git commit -m 
4.switch back to the main branch
git checkout main
5.merge the new branch into the main branch
git merge new-feature-branch
6.push change to the remote repository
git push origin main








